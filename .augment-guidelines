# FDAWG Project Guidelines

## 1. Project Structure Overview

FDAWG (Flutter Project Assistant) is organized as a mono-repo with a main app and modular packages:

- **Main App (`/`)**: The core application that integrates all packages
- **Packages (`/dawgs/`)**: Modular components with specific responsibilities
  - `fdawg_core`: Core utilities and shared components
  - `fdawg_namer`: Project naming validation and utilities
  - (More packages to come)

### Package Responsibilities

- **fdawg_core**: Contains platform options and other core utilities that are used across the application
- **fdawg_namer**: Handles validation of project names and app names across different platforms

## 2. Coding Standards and Conventions

We follow the [very_good_analysis](https://pub.dev/packages/very_good_analysis) rules with some customizations:

```yaml
# From analysis_options.yaml
linter:
  rules:
    prefer_relative_imports: true
    always_use_package_imports: false
    prefer_single_quotes: true
    public_member_api_docs: false
    lines_longer_than_80_chars: false
```

### General Guidelines

- Use relative imports for files within the same package
- Use single quotes for strings
- Follow Flutter's style guide for widget structure
- Keep methods small and focused on a single responsibility
- Use meaningful variable and function names

## 3. Architecture Patterns

FDAWG uses a Provider-based architecture with clear separation of concerns:

- **View Models**: Handle business logic and state management (e.g., `CreateProjectViewModel`)
- **UI Components**: Presentation layer that consumes view models
- **Services**: Handle external interactions and data operations

### State Management

- Use `ChangeNotifierProvider` for simple state management
- Keep state close to where it's used
- Use `Provider.of<T>` for accessing state in the widget tree

## 4. Workflow for Creating New Features

1. **Planning**:
   - Define the feature scope and requirements
   - Identify which package should contain the feature

2. **Implementation**:
   - Create necessary models, services, and utilities
   - Implement UI components
   - Connect to state management

3. **Testing**:
   - Write unit tests for business logic
   - Write widget tests for UI components

4. **Documentation**:
   - Update relevant documentation
   - Add code comments for complex logic

## 5. Testing Guidelines

### Unit Tests

- Test all validation logic and business rules
- Use descriptive test names that explain the expected behavior
- Group related tests using the `group` function
- Follow the Arrange-Act-Assert pattern

Example:

```dart
test('Throws error for empty name', () {
  expect(
    () => FdawgNamer.isValidProjectName(''),
    throwsA(equals(errorNameEmpty)),
  );
});
```

### Widget Tests

- Test key user interactions
- Verify UI state changes correctly
- Mock dependencies when necessary

## 6. Documentation Requirements

### Code Documentation

- Add dartdoc comments for public APIs
- Document complex algorithms or business rules
- Use TODO comments for planned improvements

### Package Documentation

- Each package should have a README.md explaining:
  - Purpose and features
  - Usage examples
  - Dependencies
  - How to contribute

## 7. Git Workflow Recommendations

### Branching Strategy

- `main`: Production-ready code
- `develop`: Integration branch for features
- `feature/*`: New features or enhancements
- `bugfix/*`: Bug fixes
- `release/*`: Release preparation

### Commit Messages

Follow conventional commits format:

```commit
<type>(<scope>): <description>

[optional body]

[optional footer]
```

Types:

- feat: A new feature
- fix: A bug fix
- docs: Documentation changes
- style: Code style changes (formatting, etc.)
- refactor: Code changes that neither fix bugs nor add features
- test: Adding or modifying tests
- chore: Changes to the build process or auxiliary tools

### Pull Requests

- Keep PRs focused on a single feature or fix
- Include tests for new functionality
- Ensure all tests pass before requesting review
- Link related issues in the PR description
